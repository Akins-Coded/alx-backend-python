pipeline {
    agent any

    environment {
        VENV = '.venv'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "main",
                    url: 'git@github.com:Akins-Coded/alx-backend-python.git',
                    credentialsId: 'github-ssh'
            }
        }

        stage('Prepare environment') {
            steps {
                withCredentials([file(credentialsId: 'django-env-file', variable: 'ENV_FILE')]) {
                    sh '''
                        mkdir -p messaging_app
                        cp $ENV_FILE messaging_app/.env
                        echo "âœ… .env file copied into messaging_app/.env"
                    '''
                }
            }
        }

        stage('Install dependencies') {
            steps {
                sh '''
                    python3 -m venv $VENV
                    . $VENV/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Django checks') {
            steps {
                sh '''
                    . $VENV/bin/activate
                    cd messaging_app
                    python manage.py check
                '''
            }
        }

        stage('Run tests') {
            steps {
                sh '''
                    . $VENV/bin/activate
                    cd messaging_app
                    rm -f test_db.sqlite3   # ensure fresh DB
                    export DATABASE_URL=''  # force SQLite fallback
                    mkdir -p reports/junit
                    pytest --ds=messaging_app.settings \
                           --junitxml=reports/junit/pytest.xml \
                           --maxfail=1 --disable-warnings -q
                '''
            }
            post {
                always {
                    junit 'messaging_app/reports/junit/pytest.xml'
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        def app = docker.build("akinscoded/messaging_app:latest")
                        app.push()
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
    }
}
