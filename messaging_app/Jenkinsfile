pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = "akinscoded/messaging_app"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Akins-Coded/alx-backend-python.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "üöÄ Building Docker image..."
                    docker build -t ${DOCKER_HUB_REPO}:${BUILD_NUMBER} ./messaging_app
                '''
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "üîë Logging into DockerHub..."
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                    echo "üì¶ Pushing Docker image with tag ${BUILD_NUMBER}..."
                    docker push ${DOCKER_HUB_REPO}:${BUILD_NUMBER}

                    echo "üì¶ Tagging and pushing latest..."
                    docker tag ${DOCKER_HUB_REPO}:${BUILD_NUMBER} ${DOCKER_HUB_REPO}:latest
                    docker push ${DOCKER_HUB_REPO}:latest
                '''
            }
        }

        stage('Run Docker Container') {
            steps {
                sh '''
                    echo "üèÉ Running Docker container on port 9000..."
                    docker run -d \
                      --name messaging_app_${BUILD_NUMBER} \
                      -p 9000:9000 \
                      --env-file ./messaging_app/.env \
                      ${DOCKER_HUB_REPO}:${BUILD_NUMBER}
                '''
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
    }
}
